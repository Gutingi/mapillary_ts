# -*- coding: utf-8 -*-
"""
/***************************************************************************
 mapillary_traffic_signs
                                 A QGIS plugin
 This plugin allows for the usage of Mapillary traffic sign icons when using traffic sign data from mapillary.com
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-07-29
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Gutingi
        email                : gutingi.dev@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsSvgMarkerSymbolLayer, QgsSymbol, QgsProject, QgsProperty, QgsSymbolLayer

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .mapillary_ts_dialog import mapillary_traffic_signsDialog
import os.path
import os
import urllib.request
import zipfile
import io


class mapillary_traffic_signs:
    """QGIS Plugin Implementation."""

    def apply_svg_symbology(self):
        # Get selected layer
        layer_index = self.dlg.layerSelection.currentIndex()
        layer_id = self.dlg.layerSelection.itemData(layer_index)
        layer = QgsProject.instance().mapLayer(layer_id)
        if not layer:
            from qgis.PyQt.QtWidgets import QMessageBox
            QMessageBox.warning(self.dlg, "Error", "No valid layer selected.")
            return

        # Get selected column
        field = self.dlg.columnSelection.currentText()
        if not field:
            from qgis.PyQt.QtWidgets import QMessageBox
            QMessageBox.warning(self.dlg, "Error", "No attribute column selected.")
            return

        # SVG base path (e.g. .../mapillary_sprite_source/package_signs/)
        svg_base_path = os.path.join(self.plugin_dir, "mapillary_sprite_source", "package_signs")
        # Use forward slashes for QGIS expression
        svg_base_path_expr = svg_base_path.replace("\\", "/")
        if not svg_base_path_expr.endswith("/"):
            svg_base_path_expr += "/"

        # Build the expression for data-defined SVG URL
        expr = f"'{svg_base_path_expr}' || \"{field}\" || '.svg'"

        # Build the SVG marker symbol
        symbol = QgsSymbol.defaultSymbol(layer.geometryType())
        svg_marker = QgsSvgMarkerSymbolLayer('')
        svg_marker.setDataDefinedProperty(
            QgsSymbolLayer.PropertyName,  # The correct enum for 'name'
            QgsProperty.fromExpression(expr)  # Wrap the string as a QgsProperty
        )
        symbol.changeSymbolLayer(0, svg_marker)
        layer.renderer().setSymbol(symbol)
        layer.triggerRepaint()

    def check_label_folder_status(self):
        # This should match your download folder name/path:
        download_folder = os.path.join(self.plugin_dir, "mapillary_sprite_source")
        if os.path.exists(download_folder):
            # Exists: display status in label
            self.dlg.labelFolderStatus.setText('<font color="green"\>&#x2714; Icons folder exists</font>')
        else:
            # Does not exist: display warning in label
            self.dlg.labelFolderStatus.setText('<font color="red"\>&#x2718; Icons folder missing!</font>')

    def download_traffic_sign_icons(self):
        # Where to store the icons
        download_folder = os.path.join(self.plugin_dir, "mapillary_sprite_source")

         # If the folder exists, stop and show a message
        if os.path.exists(download_folder):
            from qgis.PyQt.QtWidgets import QMessageBox
            QMessageBox.information(self.dlg, "Info", "The traffic sign icons are already downloaded.")
            return

        # URL for the ZIP archive
        url = "https://github.com/mapillary/mapillary_sprite_source/archive/refs/heads/master.zip"

        # UI feedback
        self.dlg.downloadTrafficSignIcons.setText("Downloading...")
        self.dlg.downloadTrafficSignIcons.setEnabled(False)
        self.dlg.downloadProgressBar.setValue(0)
        self.dlg.downloadProgressBar.setVisible(True)  # Show bar if hidden


        try:
            response = urllib.request.urlopen(url)
            content_length = response.getheader('Content-Length')
            total_length = int(content_length) if content_length is not None else None
            chunk_size = 8192

            data = bytearray()
            downloaded = 0

            while True:
                chunk = response.read(chunk_size)
                if not chunk:
                    break
                data += chunk
                downloaded += len(chunk)
                if total_length:
                    progress = int(downloaded * 100 / total_length)
                    self.dlg.downloadProgressBar.setValue(progress)
                else:
                    self.dlg.downloadProgressBar.setValue(0)  # Can't calculate progress

            # Extract zipfile from memory (does not write temp file)
            with zipfile.ZipFile(io.BytesIO(data)) as z:
                for member in z.infolist():
                    # Each file is inside a top-level dir in the zip, strip it
                    parts = member.filename.split('/', 1)
                    if len(parts) == 2:
                        target_path = os.path.join(download_folder, parts[1])
                        if member.is_dir():
                            os.makedirs(target_path, exist_ok=True)
                        else:
                            os.makedirs(os.path.dirname(target_path), exist_ok=True)
                            with z.open(member) as source, open(target_path, "wb") as target:
                                target.write(source.read())

            self.dlg.downloadProgressBar.setValue(100)
            self.dlg.downloadTrafficSignIcons.setText("Download Complete")
        except Exception as e:
            self.dlg.downloadTrafficSignIcons.setText("Download Failed!")
            from qgis.PyQt.QtWidgets import QMessageBox
            QMessageBox.warning(self.dlg, "Error", f"Could not download icons: {e}")
        finally:
            self.dlg.downloadTrafficSignIcons.setEnabled(True)

    def on_layer_selection_changed(self, index):
        # Get the selected layer id from userData
        layer_id = self.dlg.layerSelection.itemData(index)
        if not layer_id:
            self.dlg.columnSelection.clear()
            return
        # Get the actual layer object
        layer = QgsProject.instance().mapLayer(layer_id)
        if layer is None:
            self.dlg.columnSelection.clear()
            return
        # Populate combo with field names
        field_names = [field.name() for field in layer.fields()]
        self.dlg.columnSelection.clear()
        self.dlg.columnSelection.addItems(field_names)

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'mapillary_traffic_signs_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Mapillary Traffic Signs')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('mapillary_traffic_signs', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/mapillary_ts/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Import Mapillary Traffic Sign Icons'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Mapillary Traffic Signs'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = mapillary_traffic_signsDialog()

        # Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children()
        # Clear the contents of the layerSelection from previous runs
        self.dlg.layerSelection.clear()
        # Populate the layerSelection with names of all the loaded layers
        for layer in layers:
            # Get the actual QGIS layer object:
            qlayer = layer.layer()
            if qlayer is not None:  # a vector, raster, etc.
                self.dlg.layerSelection.addItem(qlayer.name(), qlayer.id())

        # Connect the currentIndexChanged signal for dynamic column filling
        self.dlg.layerSelection.currentIndexChanged.connect(self.on_layer_selection_changed)
        # Populate columns for the initially selected item, if any
        self.on_layer_selection_changed(self.dlg.layerSelection.currentIndex())

        self.dlg.downloadProgressBar.setValue(0)
        self.dlg.downloadTrafficSignIcons.clicked.connect(self.download_traffic_sign_icons)

        self.dlg.checkLabelFolderStatus.clicked.connect(self.check_label_folder_status)

        self.dlg.applyButton.clicked.connect(self.apply_svg_symbology)


        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
